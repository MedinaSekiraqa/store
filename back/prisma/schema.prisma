generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  brands     Brand[]     @relation("StoreToBrand")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  reviews    Review[]    @relation("StoreToReview")
  tag        Tag[]       @relation("StoreToTag")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt

  @@index([storeId])
}

model Brand {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToBrand", fields: [storeId], references: [id])
  name      String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  Product   Product[] @relation("BrandToProduct")

  @@index([storeId])
}

model Review {
  id        String    @id @default(uuid())
  userId    String
  storeId   String
  store     Store     @relation("StoreToReview", fields: [storeId], references: [id])
  title     String
  content   String
  rating    Int
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  Product   Product[] @relation("ReviewToProduct")

  @@index([storeId])
}

model Product {
  id          String      @id @default(uuid())
  userId      String
  storeId     String
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  sizeId      String // Foreign Key to Size
  size        Size        @relation(fields: [sizeId], references: [id])
  brandId     String
  brand       Brand       @relation("BrandToProduct", fields: [brandId], references: [id])
  reviewId    String?
  review      Review?     @relation("ReviewToProduct", fields: [reviewId], references: [id])
  // tagId       String?
  tags        Tag[]       @relation("TagToProduct")
  attributes  Attribute[]
  name        String
  description String
  status      String
  price       Decimal
  stock       Int
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updateAt    DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([brandId])
  @@index([reviewId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Tag {
  id        String    @id @default(uuid())
  name      String
  storeId   String
  store     Store     @relation("StoreToTag", fields: [storeId], references: [id])
  productId String?
  products  Product[] @relation("TagToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([productId])
  @@index([storeId])
}

model Attribute {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  adress     String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  name     String?
  role     UserRole @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
